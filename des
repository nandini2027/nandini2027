import numpy as np
import cv2 
import random as r
def encrypt(m):
    key='133457799BBCDFF1'
    res=[]       
    for i in range(len(key)):
        if key[i].isdigit():
            res.append(str(bin(int(key[i]))[2:].zfill(4)))
        else:
            res.append(str(bin(int(key[i],16))[2:].zfill(4)))
    res_str="".join(res)    
    #print(res)
    #print(res_str)
    pc1=[57,49,41,33,25,17,9,1,58,50,42,34,26,18,10,2,59,51,43,35,27,19,11,3,60,52,44,36,63,55,47,39,31,23,15,7,62,54,46,38,30,22,14,6,61,53,45,37,29,21,13,5,28,20,12,4]
    k_lst=[]
    for i in range(len(pc1)):
        k_lst.append(res_str[pc1[i]-1])
    k="".join(k_lst)
    #print(k)
    c0="".join(k_lst[:len(k_lst)//2])
    d0="".join(k_lst[len(k_lst)//2:])
    #print(c0,d0)  
    def init16(a,b,count):
        l1=[]
        l2=[]
        if count in [1,2,9,16]:
            for i in range(len(a)):
                if i==len(a)-1:
                    l1.append(a[0])
                elif i<len(a)-1:
                    l1.append(a[i+1]) 
            for i in range(len(b)):
                if i==len(b)-1:
                    l2.append(b[0])
                elif i<len(b)-1:
                    l2.append(b[i+1])
        else:
            for i in range(len(a)):
                if i==len(a)-2:
                    l1.append(a[0])
                elif i<len(a)-2:
                    l1.append(a[i+2])
                elif i==len(a)-1:
                    l1.append(a[1])     
            for i in range(len(b)):
                if i==len(b)-2:
                    l2.append(b[0])
                elif i<len(b)-2:
                    l2.append(b[i+2])
                elif i==len(b)-1:
                    l2.append(b[1])      
        return(l1,l2)
    c1,d1=init16(c0,d0,1) 
    c2,d2=init16(c1,d1,2,)
    c3,d3=init16(c2,d2,3)
    c4,d4=init16(c3,d3,4)
    c5,d5=init16(c4,d4,5)
    c6,d6=init16(c5,d5,6)
    c7,d7=init16(c6,d6,7)
    c8,d8=init16(c7,d7,8)
    c9,d9=init16(c8,d8,9)
    c10,d10=init16(c9,d9,10)
    c11,d11=init16(c10,d10,11)
    c12,d12=init16(c11,d11,12)
    c13,d13=init16(c12,d12,13)
    c14,d14=init16(c13,d13,14)
    c15,d15=init16(c14,d14,15)
    c16,d16=init16(c15,d15,16)
    pc2=[14,17,11,24,1,5,3,28,15,6,21,10,23,19,12,4,26,8,16,7,27,20,13,2,41,52,31,37,47,55,30,40,51,45,33,48,44,49,39,56,34,53,46,42,50,36,29,32]
    def ksub16(a):
        l=[]
        for i in range(len(pc2)):  
                l.append(a[pc2[i]-1])   
        return l
    k1,k2,k3,k4,k5,k6,k7,k8,k9,k10,k11,k12,k13,k14,k15,k16=ksub16(c1+d1),ksub16(c2+d2),ksub16(c3+d3),ksub16(c4+d4),ksub16(c5+d5),ksub16(c6+d6),ksub16(c7+d7),ksub16(c8+d8),ksub16(c9+d9),ksub16(c10+d10),ksub16(c11+d11),ksub16(c12+d12),ksub16(c13+d13),ksub16(c14+d14),ksub16(c15+d15),ksub16(c16+d16)
    ip=[58,50,42,34,26,18,10,2,60,52,44,36,28,20,12,4,62,54,46,38,30,22,14,6,64,56,48,40,32,24,16,8,57,49,41,33,25,17,9,1,59,51,43,35,27,19,11,3,61,53,45,37,29,21,13,5,63,55,47,39,31,23,15,7]
    m_res=[]
    IP=[]
    for i in range(len(m)):
        if m[i].isdigit():
            m_res.append(str(bin(int(m[i]))[2:].zfill(4)))
        else:
            m_res.append(str(bin(int(m[i],16))[2:].zfill(4)))
    m_res="".join(m_res)
    #print(m_res)        
    for i in range(len(ip)):
            IP.append(m_res[ip[i]-1])
    l0=[]
    r0=[]
    for i in range(len(IP)//2):
        l0.append(IP[i])
    for i in range(len(IP)//2,len(IP)):
        r0.append(IP[i])
    #print(l0,r0)
    def f1(a,b,c):
        e=[32,1,2,3,4,5,4,5,6,7,8,9,8,9,10,11,12,13,12,13,14,15,16,17,16,17,18,19,20,21,20,21,22,23,24,25,24,25,26,27,28,29,28,29,30,31,32,1]             
        er0=[]
        for i in range(len(e)):
            er0.append(a[e[i]-1])
    #xor addition
        add1=[]
        for i in range(len(b)):
            if b[i]=='1' and er0[i]=='1':
                add1.append('0')
            elif (b[i]=='0' and er0[i]=='1') or (b[i]=='1' and er0[i]=='0'):
                add1.append('1')
            else:
                add1.append('0')    
    #print(add1)
    # 4 bit from 6 bit
        s1=([14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7],[0 ,15,   7,  4,  14,  2,  13,  1,  10,  6,  12, 11,   9,  5,   3,  8],[ 4 , 1,  14,  8,  13,  6,   2, 11,  15, 12,   9,  7,   3, 10,   5,  0],[15, 12,   8,  2,   4,  9,   1,  7,   5, 11,   3, 14,  10,  0,   6, 13])
        s2=([15 , 1,   8, 14,   6, 11,   3,  4,   9,  7,   2, 13,  12,  0,   5, 10],
        [3, 13 ,  4 , 7  ,15  ,2   ,8 ,14  ,12 , 0  , 1 ,10   ,6  ,9,  11,  5],
        [0, 14,   7, 11,  10,  4,  13,  1,   5,  8,  12,  6,   9 , 3 ,  2, 1],
        [13,  8  ,10 , 1,   3, 15,   4,  2,  11,  6,   7, 12,   0,  5,  14,  9])
        s3=([10,0,9,14,   6,  3,  15,  5,   1, 13,  12,  7,  11,  4,   2,  8],
        [13  ,7,   0,  9,   3,  4,   6, 10,   2,  8,   5, 14,  12, 11,  15,  1],
        [13 , 6 ,  4 , 9 ,  8 ,15 ,  3 , 0 , 11,  1,   2, 12,   5, 10,  14,  7],
        [1, 10,  13,  0,   6,  9,   8,  7,   4, 15,  14,  3,  11,  5,   2, 12])
        s4=([7, 13,  14,  3,   0,  6,   9, 10,   1,  2,   8,  5,  11, 12,   4, 15],[13,  8,  11,  5,   6, 15,   0,  3,   4,  7,   2, 12,   1, 10,  14,  9],[10,  6,   9,  0,  12, 11,   7, 13,  15,  1,   3, 14,   5,  2,   8 , 4],[3, 15,   0,  6,  10,  1,  13,  8,   9,  4,   5, 11,  12,  7,   2, 14])
        s5=([2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9],[14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6],[4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14],[11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3])
        s6=([12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11],[10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8],[9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6],[4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13])
        s7=([4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1],[13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6],[1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2],[6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12])
        s8=([13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7],[1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2],[7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8],[2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11])
        sb=''
        i=0
        while i<=42:
            if i==0:
                s=bin(s1[int(add1[i]+add1[i+5],2)][int("".join(add1[i+1:i+5]),2)])[2:].zfill(4)
                sb+=s
            elif i==6:
                s=bin(s2[int(add1[i]+add1[i+5],2)][int("".join(add1[i+1:i+5]),2)])[2:].zfill(4)
                sb+=s
            elif i==12:
                s=bin(s3[int(add1[i]+add1[i+5],2)][int("".join(add1[i+1:i+5]),2)])[2:].zfill(4)
                sb+=s
            elif i==18:
                s=bin(s4[int(add1[i]+add1[i+5],2)][int("".join(add1[i+1:i+5]),2)])[2:].zfill(4)
                sb+=s
            elif i==24:
                s=bin(s5[int(add1[i]+add1[i+5],2)][int("".join(add1[i+1:i+5]),2)])[2:].zfill(4)
                sb+=s
            elif i==30:
                s=bin(s6[int(add1[i]+add1[i+5],2)][int("".join(add1[i+1:i+5]),2)])[2:].zfill(4)
                sb+=s
            elif i==36:
                s=bin(s7[int(add1[i]+add1[i+5],2)][int("".join(add1[i+1:i+5]),2)])[2:].zfill(4)
                sb+=s
            elif i==42:
                s=bin(s8[int(add1[i]+add1[i+5],2)][int("".join(add1[i+1:i+5]),2)])[2:].zfill(4)
                sb+=s
            i+=6
    #print(sb)   
        p=[16,7,20,21,29,12,28,17,1,15,23,26,5,18,31,10,2,8,24,14,32,27,3,9,19,13,30,6,22,11,4,25]
        f=[]
        for i in range(len(p)):
            f.append(sb[p[i]-1])
    #print(f
        r=[]
        for i in range(32):
            if f[i]=='1' and c[i]=='1':
                r.append('0')
            elif (f[i]=='0' and c[i]=='1') or (f[i]=='1' and c[i]=='0'):
                r.append('1')
            else:
                r.append('0')
        return r       
    l1=r0
    r1=f1(r0,k1,l0)
    l2=r1
    r2=f1(r1,k2,l1)
    l3=r2
    r3=f1(r2,k3,l2)
    l4=r3
    r4=f1(r3,k4,l3)
    l5=r4
    r5=f1(r4,k5,l4)
    l6=r5
    r6=f1(r5,k6,l5)
    l7=r6
    r7=f1(r6,k7,l6)
    l8=r7
    r8=f1(r7,k8,l7)
    l9=r8
    r9=f1(r8,k9,l8)
    l10=r9
    r10=f1(r9,k10,l9)
    l11=r10
    r11=f1(r10,k11,l10)
    l12=r11
    r12=f1(r11,k12,l11)
    l13=r12
    r13=f1(r12,k13,l12)
    l14=r13
    r14=f1(r13,k14,l13)
    l15=r14
    r15=f1(r14,k15,l14)
    l16=r15
    r16=f1(r15,k16,l15)
    #print(r16+l16)
    IPF=[40,8,48,16,56,24,64,32,39,7,47,15,55,23,63,31,38,6,46,14,54,22,62,30,37,5,45,13,53,21,61,29,36,4,44,12,52,20,60,28,35,3,43,11,51,19,59,27,34,2,42,10,50,18,58,26,33,1,41,9,49,17,57,25]
    final=[]
    for i in range(len(IPF)):
        final.append((r16+l16)[IPF[i]-1])
    #print(final)
    hexa=''
    i=0
    while i<64:
        alpha=format(int("".join(final[i:i+4]),2),'x')
        hexa+=alpha
        i+=4
    return hexa

img= cv2.imread(r"C:\Users\ASUS\Pictures\Screenshots\Screenshot 2024-06-16 105953.png")
data=np.array(img)
#print(type(data));
dim=data.shape
#print(data)
elem=list(data.flatten())
print(elem,len(elem))
random=[]
char=[]
n=list(map(str,input().split()))
cnt=0
b=0
ch=''
for i in n:
    if len(i)>1:
        cnt+=1
        b+=len(i)
        for j in range(len(i)):
            s=format(ord(i[j]),'08b')
            s+=ch
            char.append(s)
    elif len(i)==1:
        char.append(format(ord(i),'08b'))

lim=(len(n)-cnt)*8+b*8
print(lim,"".join(char))        
i=0
while i<lim  :
    random.append(r.randint(0,lim))
    i+=1
#print(random)    
changed=[]

if len(elem)>=lim:
    for i in random:
      changed.append(format(elem[i],'08b'))
        
#print(changed)
changed_new=changed[:]

new=[]
k=0
for i in "".join(char):
    while k<lim:
       d=list(changed_new[k])
       d[-1]=i
       new.append("".join(d))
       k+=1
       break
    
#print(new)
for i in range(len(new)):
    new[i]=int(new[i],2)
#print(new)
j=0
for i in random:
    while j<lim:
        elem[i]=new[j]
        j+=1
        break
#print(elem) 

#print(elem)
elem2=[]
[elem2.append(int(x)) for x in elem if int(x) not in elem2]
h=''
j=0
i=0
elem3={}
while i<len(elem2):
    while j<64:
        g=format(int(bin(elem2[i])[2:].zfill(64)[j:j+4],2),'x')
        h+=g
        j+=4
    elem3[elem2[i]]=encrypt(h)
    i+=1
    j=0
    h=''
#print(elem3)
elem1=[]
[elem1.append(str(x)+" ") for x in elem]
elem1="".join(elem1)
h=''
for i in elem3.keys():
    h+=elem1.replace(str(i),elem3[i])
    
print(h)
